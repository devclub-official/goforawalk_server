steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'  # bash 셸을 사용하여 명령 실행
    args:
      - '-c'  # 다음 인자를 명령어로 해석
      - |
        # 환경변수 사용하여 SSH 명령 실행
        gcloud compute ssh ${_SSH_USER}@${_INSTANCE_NAME} --zone ${_LOCATION} --project ${_PROJECT_ID} --command '
          set -e # 명령어 실패 시 즉시 종료

          echo ">>>>> 원격 서버에서 Git 업데이트 및 Docker Compose 빌드/실행 <<<<<"

          echo ">>>>> Docker 이미지 정리 중..." && \
          sudo docker image prune -f && \

          echo ">>>>> 프로젝트 디렉토리로 이동 중...(없으면 생성)" && \
          if [ ! -d "/home/gfw" ]; then
            echo ">>>>> /home/gfw 디렉토리 생성 중..."
            sudo mkdir -p /home/gfw && \
            sudo chown $(whoami):$(whoami) /home/gfw && \
            cd /home/gfw && \
            git clone https://github.com/devclub-official/goforawalk_server .
          else
            cd /home/gfw
          fi && \

          echo ">>>>> Git 소스 업데이트 (fetch & reset) 중..." && \
          git fetch origin ${BRANCH_NAME} && \
          git reset --hard origin/${BRANCH_NAME} && \

          echo ">>>>> 애플리케이션 디렉토리 (/home/gfw/backend/app-server) 로 이동 중..." && \
          cd /home/gfw/backend/app-server && \

          # Docker Compose를 사용하여 이미지 빌드 (Dockerfile의 BuildKit 캐시 활용)
          echo ">>>>> Docker Compose 이미지 빌드 중..." && \
          sudo docker compose build app-server && \

          # Docker Compose를 사용하여 컨테이너 실행 (이미 빌드된 이미지 사용)
          echo ">>>>> Docker Compose 컨테이너 실행 중..." && \
          sudo docker compose up -d --remove-orphans app-server && \

          echo ">>>>> 배포 스크립트 완료."
        '
options:
  logging: CLOUD_LOGGING_ONLY  # 로그를 Cloud Logging에만 저장 (기본 로그 스토리지 비용 절감)